// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file kujira/oracle/genesis.proto (package kujira.oracle, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AggregateExchangeRatePrevote, AggregateExchangeRateVote, ExchangeRateTuple, Params } from "./oracle_pb.js";
/**
 * GenesisState defines the oracle module's genesis state.
 *
 * @generated from message kujira.oracle.GenesisState
 */
export class GenesisState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated kujira.oracle.FeederDelegation feeder_delegations = 2;
         */
        this.feederDelegations = [];
        /**
         * @generated from field: repeated kujira.oracle.ExchangeRateTuple exchange_rates = 3;
         */
        this.exchangeRates = [];
        /**
         * @generated from field: repeated kujira.oracle.MissCounter miss_counters = 4;
         */
        this.missCounters = [];
        /**
         * @generated from field: repeated kujira.oracle.AggregateExchangeRatePrevote aggregate_exchange_rate_prevotes = 5;
         */
        this.aggregateExchangeRatePrevotes = [];
        /**
         * @generated from field: repeated kujira.oracle.AggregateExchangeRateVote aggregate_exchange_rate_votes = 6;
         */
        this.aggregateExchangeRateVotes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisState, a, b);
    }
}
GenesisState.runtime = proto3;
GenesisState.typeName = "kujira.oracle.GenesisState";
GenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "feeder_delegations", kind: "message", T: FeederDelegation, repeated: true },
    { no: 3, name: "exchange_rates", kind: "message", T: ExchangeRateTuple, repeated: true },
    { no: 4, name: "miss_counters", kind: "message", T: MissCounter, repeated: true },
    { no: 5, name: "aggregate_exchange_rate_prevotes", kind: "message", T: AggregateExchangeRatePrevote, repeated: true },
    { no: 6, name: "aggregate_exchange_rate_votes", kind: "message", T: AggregateExchangeRateVote, repeated: true },
]);
/**
 * FeederDelegation is the address for where oracle feeder authority are
 * delegated to. By default this struct is only used at genesis to feed in
 * default feeder addresses.
 *
 * @generated from message kujira.oracle.FeederDelegation
 */
export class FeederDelegation extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string feeder_address = 1;
         */
        this.feederAddress = "";
        /**
         * @generated from field: string validator_address = 2;
         */
        this.validatorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeederDelegation().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeederDelegation().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeederDelegation().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeederDelegation, a, b);
    }
}
FeederDelegation.runtime = proto3;
FeederDelegation.typeName = "kujira.oracle.FeederDelegation";
FeederDelegation.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "feeder_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MissCounter defines an miss counter and validator address pair used in
 * oracle module's genesis state
 *
 * @generated from message kujira.oracle.MissCounter
 */
export class MissCounter extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string validator_address = 1;
         */
        this.validatorAddress = "";
        /**
         * @generated from field: uint64 miss_counter = 2;
         */
        this.missCounter = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MissCounter().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MissCounter().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MissCounter().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MissCounter, a, b);
    }
}
MissCounter.runtime = proto3;
MissCounter.typeName = "kujira.oracle.MissCounter";
MissCounter.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "miss_counter", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
//# sourceMappingURL=genesis_pb.js.map