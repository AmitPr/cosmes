// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file kujira/oracle/oracle.proto (package kujira.oracle, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * Params defines the parameters for the oracle module.
 *
 * @generated from message kujira.oracle.Params
 */
export class Params extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 vote_period = 1;
         */
        this.votePeriod = protoInt64.zero;
        /**
         * @generated from field: string vote_threshold = 2;
         */
        this.voteThreshold = "";
        /**
         * @generated from field: string reward_band = 3;
         */
        this.rewardBand = "";
        /**
         * @generated from field: uint64 reward_distribution_window = 4;
         */
        this.rewardDistributionWindow = protoInt64.zero;
        /**
         * @generated from field: repeated kujira.oracle.Denom whitelist = 5;
         */
        this.whitelist = [];
        /**
         * @generated from field: string slash_fraction = 6;
         */
        this.slashFraction = "";
        /**
         * @generated from field: uint64 slash_window = 7;
         */
        this.slashWindow = protoInt64.zero;
        /**
         * @generated from field: string min_valid_per_window = 8;
         */
        this.minValidPerWindow = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Params().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Params().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Params().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Params, a, b);
    }
}
Params.runtime = proto3;
Params.typeName = "kujira.oracle.Params";
Params.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "vote_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "vote_threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reward_band", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reward_distribution_window", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "whitelist", kind: "message", T: Denom, repeated: true },
    { no: 6, name: "slash_fraction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "slash_window", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "min_valid_per_window", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Denom - the object to hold configurations of each denom
 *
 * @generated from message kujira.oracle.Denom
 */
export class Denom extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Denom().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Denom().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Denom().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Denom, a, b);
    }
}
Denom.runtime = proto3;
Denom.typeName = "kujira.oracle.Denom";
Denom.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * struct for aggregate prevoting on the ExchangeRateVote.
 * The purpose of aggregate prevote is to hide vote exchange rates with hash
 * which is formatted as hex string in SHA256("{salt}:{exchange rate}{denom},...,{exchange rate}{denom}:{voter}")
 *
 * @generated from message kujira.oracle.AggregateExchangeRatePrevote
 */
export class AggregateExchangeRatePrevote extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string hash = 1;
         */
        this.hash = "";
        /**
         * @generated from field: string voter = 2;
         */
        this.voter = "";
        /**
         * @generated from field: uint64 submit_block = 3;
         */
        this.submitBlock = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AggregateExchangeRatePrevote().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AggregateExchangeRatePrevote().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AggregateExchangeRatePrevote().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AggregateExchangeRatePrevote, a, b);
    }
}
AggregateExchangeRatePrevote.runtime = proto3;
AggregateExchangeRatePrevote.typeName = "kujira.oracle.AggregateExchangeRatePrevote";
AggregateExchangeRatePrevote.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "submit_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * MsgAggregateExchangeRateVote - struct for voting on exchange rates.
 *
 * @generated from message kujira.oracle.AggregateExchangeRateVote
 */
export class AggregateExchangeRateVote extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated kujira.oracle.ExchangeRateTuple exchange_rate_tuples = 1;
         */
        this.exchangeRateTuples = [];
        /**
         * @generated from field: string voter = 2;
         */
        this.voter = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AggregateExchangeRateVote().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AggregateExchangeRateVote().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AggregateExchangeRateVote().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AggregateExchangeRateVote, a, b);
    }
}
AggregateExchangeRateVote.runtime = proto3;
AggregateExchangeRateVote.typeName = "kujira.oracle.AggregateExchangeRateVote";
AggregateExchangeRateVote.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "exchange_rate_tuples", kind: "message", T: ExchangeRateTuple, repeated: true },
    { no: 2, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ExchangeRateTuple - struct to store interpreted exchange rates data to store
 *
 * @generated from message kujira.oracle.ExchangeRateTuple
 */
export class ExchangeRateTuple extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        /**
         * @generated from field: string exchange_rate = 2;
         */
        this.exchangeRate = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExchangeRateTuple().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExchangeRateTuple().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExchangeRateTuple().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ExchangeRateTuple, a, b);
    }
}
ExchangeRateTuple.runtime = proto3;
ExchangeRateTuple.typeName = "kujira.oracle.ExchangeRateTuple";
ExchangeRateTuple.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exchange_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=oracle_pb.js.map