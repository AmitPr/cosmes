// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file kujira/oracle/query.proto (package kujira.oracle, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DecCoin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { AggregateExchangeRatePrevote, AggregateExchangeRateVote, Params } from "./oracle_pb.js";
/**
 * QueryExchangeRateRequest is the request type for the Query/ExchangeRate RPC method.
 *
 * @generated from message kujira.oracle.QueryExchangeRateRequest
 */
export class QueryExchangeRateRequest extends Message {
    constructor(data) {
        super();
        /**
         * denom defines the denomination to query for.
         *
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryExchangeRateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryExchangeRateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryExchangeRateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryExchangeRateRequest, a, b);
    }
}
QueryExchangeRateRequest.runtime = proto3;
QueryExchangeRateRequest.typeName = "kujira.oracle.QueryExchangeRateRequest";
QueryExchangeRateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryExchangeRateResponse is response type for the
 * Query/ExchangeRate RPC method.
 *
 * @generated from message kujira.oracle.QueryExchangeRateResponse
 */
export class QueryExchangeRateResponse extends Message {
    constructor(data) {
        super();
        /**
         * exchange_rate defines the exchange rate of whitelisted assets
         *
         * @generated from field: string exchange_rate = 1;
         */
        this.exchangeRate = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryExchangeRateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryExchangeRateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryExchangeRateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryExchangeRateResponse, a, b);
    }
}
QueryExchangeRateResponse.runtime = proto3;
QueryExchangeRateResponse.typeName = "kujira.oracle.QueryExchangeRateResponse";
QueryExchangeRateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "exchange_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryExchangeRatesRequest is the request type for the Query/ExchangeRates RPC method.
 *
 * @generated from message kujira.oracle.QueryExchangeRatesRequest
 */
export class QueryExchangeRatesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryExchangeRatesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryExchangeRatesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryExchangeRatesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryExchangeRatesRequest, a, b);
    }
}
QueryExchangeRatesRequest.runtime = proto3;
QueryExchangeRatesRequest.typeName = "kujira.oracle.QueryExchangeRatesRequest";
QueryExchangeRatesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryExchangeRatesResponse is response type for the
 * Query/ExchangeRates RPC method.
 *
 * @generated from message kujira.oracle.QueryExchangeRatesResponse
 */
export class QueryExchangeRatesResponse extends Message {
    constructor(data) {
        super();
        /**
         * exchange_rates defines a list of the exchange rate for all whitelisted denoms.
         *
         * @generated from field: repeated cosmos.base.v1beta1.DecCoin exchange_rates = 1;
         */
        this.exchangeRates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryExchangeRatesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryExchangeRatesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryExchangeRatesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryExchangeRatesResponse, a, b);
    }
}
QueryExchangeRatesResponse.runtime = proto3;
QueryExchangeRatesResponse.typeName = "kujira.oracle.QueryExchangeRatesResponse";
QueryExchangeRatesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "exchange_rates", kind: "message", T: DecCoin, repeated: true },
]);
/**
 * QueryActivesRequest is the request type for the Query/Actives RPC method.
 *
 * @generated from message kujira.oracle.QueryActivesRequest
 */
export class QueryActivesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryActivesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryActivesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryActivesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryActivesRequest, a, b);
    }
}
QueryActivesRequest.runtime = proto3;
QueryActivesRequest.typeName = "kujira.oracle.QueryActivesRequest";
QueryActivesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryActivesResponse is response type for the
 * Query/Actives RPC method.
 *
 * @generated from message kujira.oracle.QueryActivesResponse
 */
export class QueryActivesResponse extends Message {
    constructor(data) {
        super();
        /**
         * actives defines a list of the denomination which oracle prices aggreed upon.
         *
         * @generated from field: repeated string actives = 1;
         */
        this.actives = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryActivesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryActivesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryActivesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryActivesResponse, a, b);
    }
}
QueryActivesResponse.runtime = proto3;
QueryActivesResponse.typeName = "kujira.oracle.QueryActivesResponse";
QueryActivesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "actives", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * QueryVoteTargetsRequest is the request type for the Query/VoteTargets RPC method.
 *
 * @generated from message kujira.oracle.QueryVoteTargetsRequest
 */
export class QueryVoteTargetsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryVoteTargetsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryVoteTargetsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryVoteTargetsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryVoteTargetsRequest, a, b);
    }
}
QueryVoteTargetsRequest.runtime = proto3;
QueryVoteTargetsRequest.typeName = "kujira.oracle.QueryVoteTargetsRequest";
QueryVoteTargetsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryVoteTargetsResponse is response type for the
 * Query/VoteTargets RPC method.
 *
 * @generated from message kujira.oracle.QueryVoteTargetsResponse
 */
export class QueryVoteTargetsResponse extends Message {
    constructor(data) {
        super();
        /**
         * vote_targets defines a list of the denomination in which everyone
         * should vote in the current vote period.
         *
         * @generated from field: repeated string vote_targets = 1;
         */
        this.voteTargets = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryVoteTargetsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryVoteTargetsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryVoteTargetsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryVoteTargetsResponse, a, b);
    }
}
QueryVoteTargetsResponse.runtime = proto3;
QueryVoteTargetsResponse.typeName = "kujira.oracle.QueryVoteTargetsResponse";
QueryVoteTargetsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "vote_targets", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * QueryFeederDelegationRequest is the request type for the Query/FeederDelegation RPC method.
 *
 * @generated from message kujira.oracle.QueryFeederDelegationRequest
 */
export class QueryFeederDelegationRequest extends Message {
    constructor(data) {
        super();
        /**
         * validator defines the validator address to query for.
         *
         * @generated from field: string validator_addr = 1;
         */
        this.validatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryFeederDelegationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryFeederDelegationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryFeederDelegationRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryFeederDelegationRequest, a, b);
    }
}
QueryFeederDelegationRequest.runtime = proto3;
QueryFeederDelegationRequest.typeName = "kujira.oracle.QueryFeederDelegationRequest";
QueryFeederDelegationRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryFeederDelegationResponse is response type for the
 * Query/FeederDelegation RPC method.
 *
 * @generated from message kujira.oracle.QueryFeederDelegationResponse
 */
export class QueryFeederDelegationResponse extends Message {
    constructor(data) {
        super();
        /**
         * feeder_addr defines the feeder delegation of a validator
         *
         * @generated from field: string feeder_addr = 1;
         */
        this.feederAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryFeederDelegationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryFeederDelegationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryFeederDelegationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryFeederDelegationResponse, a, b);
    }
}
QueryFeederDelegationResponse.runtime = proto3;
QueryFeederDelegationResponse.typeName = "kujira.oracle.QueryFeederDelegationResponse";
QueryFeederDelegationResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "feeder_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryMissCounterRequest is the request type for the Query/MissCounter RPC method.
 *
 * @generated from message kujira.oracle.QueryMissCounterRequest
 */
export class QueryMissCounterRequest extends Message {
    constructor(data) {
        super();
        /**
         * validator defines the validator address to query for.
         *
         * @generated from field: string validator_addr = 1;
         */
        this.validatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryMissCounterRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryMissCounterRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryMissCounterRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryMissCounterRequest, a, b);
    }
}
QueryMissCounterRequest.runtime = proto3;
QueryMissCounterRequest.typeName = "kujira.oracle.QueryMissCounterRequest";
QueryMissCounterRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryMissCounterResponse is response type for the
 * Query/MissCounter RPC method.
 *
 * @generated from message kujira.oracle.QueryMissCounterResponse
 */
export class QueryMissCounterResponse extends Message {
    constructor(data) {
        super();
        /**
         * miss_counter defines the oracle miss counter of a validator
         *
         * @generated from field: uint64 miss_counter = 1;
         */
        this.missCounter = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryMissCounterResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryMissCounterResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryMissCounterResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryMissCounterResponse, a, b);
    }
}
QueryMissCounterResponse.runtime = proto3;
QueryMissCounterResponse.typeName = "kujira.oracle.QueryMissCounterResponse";
QueryMissCounterResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "miss_counter", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryAggregatePrevoteRequest is the request type for the Query/AggregatePrevote RPC method.
 *
 * @generated from message kujira.oracle.QueryAggregatePrevoteRequest
 */
export class QueryAggregatePrevoteRequest extends Message {
    constructor(data) {
        super();
        /**
         * validator defines the validator address to query for.
         *
         * @generated from field: string validator_addr = 1;
         */
        this.validatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAggregatePrevoteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAggregatePrevoteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAggregatePrevoteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAggregatePrevoteRequest, a, b);
    }
}
QueryAggregatePrevoteRequest.runtime = proto3;
QueryAggregatePrevoteRequest.typeName = "kujira.oracle.QueryAggregatePrevoteRequest";
QueryAggregatePrevoteRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryAggregatePrevoteResponse is response type for the
 * Query/AggregatePrevote RPC method.
 *
 * @generated from message kujira.oracle.QueryAggregatePrevoteResponse
 */
export class QueryAggregatePrevoteResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAggregatePrevoteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAggregatePrevoteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAggregatePrevoteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAggregatePrevoteResponse, a, b);
    }
}
QueryAggregatePrevoteResponse.runtime = proto3;
QueryAggregatePrevoteResponse.typeName = "kujira.oracle.QueryAggregatePrevoteResponse";
QueryAggregatePrevoteResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "aggregate_prevote", kind: "message", T: AggregateExchangeRatePrevote },
]);
/**
 * QueryAggregatePrevotesRequest is the request type for the Query/AggregatePrevotes RPC method.
 *
 * @generated from message kujira.oracle.QueryAggregatePrevotesRequest
 */
export class QueryAggregatePrevotesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAggregatePrevotesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAggregatePrevotesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAggregatePrevotesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAggregatePrevotesRequest, a, b);
    }
}
QueryAggregatePrevotesRequest.runtime = proto3;
QueryAggregatePrevotesRequest.typeName = "kujira.oracle.QueryAggregatePrevotesRequest";
QueryAggregatePrevotesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryAggregatePrevotesResponse is response type for the
 * Query/AggregatePrevotes RPC method.
 *
 * @generated from message kujira.oracle.QueryAggregatePrevotesResponse
 */
export class QueryAggregatePrevotesResponse extends Message {
    constructor(data) {
        super();
        /**
         * aggregate_prevotes defines all oracle aggregate prevotes submitted in the current vote period
         *
         * @generated from field: repeated kujira.oracle.AggregateExchangeRatePrevote aggregate_prevotes = 1;
         */
        this.aggregatePrevotes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAggregatePrevotesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAggregatePrevotesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAggregatePrevotesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAggregatePrevotesResponse, a, b);
    }
}
QueryAggregatePrevotesResponse.runtime = proto3;
QueryAggregatePrevotesResponse.typeName = "kujira.oracle.QueryAggregatePrevotesResponse";
QueryAggregatePrevotesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "aggregate_prevotes", kind: "message", T: AggregateExchangeRatePrevote, repeated: true },
]);
/**
 * QueryAggregateVoteRequest is the request type for the Query/AggregateVote RPC method.
 *
 * @generated from message kujira.oracle.QueryAggregateVoteRequest
 */
export class QueryAggregateVoteRequest extends Message {
    constructor(data) {
        super();
        /**
         * validator defines the validator address to query for.
         *
         * @generated from field: string validator_addr = 1;
         */
        this.validatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAggregateVoteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAggregateVoteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAggregateVoteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAggregateVoteRequest, a, b);
    }
}
QueryAggregateVoteRequest.runtime = proto3;
QueryAggregateVoteRequest.typeName = "kujira.oracle.QueryAggregateVoteRequest";
QueryAggregateVoteRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryAggregateVoteResponse is response type for the
 * Query/AggregateVote RPC method.
 *
 * @generated from message kujira.oracle.QueryAggregateVoteResponse
 */
export class QueryAggregateVoteResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAggregateVoteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAggregateVoteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAggregateVoteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAggregateVoteResponse, a, b);
    }
}
QueryAggregateVoteResponse.runtime = proto3;
QueryAggregateVoteResponse.typeName = "kujira.oracle.QueryAggregateVoteResponse";
QueryAggregateVoteResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "aggregate_vote", kind: "message", T: AggregateExchangeRateVote },
]);
/**
 * QueryAggregateVotesRequest is the request type for the Query/AggregateVotes RPC method.
 *
 * @generated from message kujira.oracle.QueryAggregateVotesRequest
 */
export class QueryAggregateVotesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAggregateVotesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAggregateVotesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAggregateVotesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAggregateVotesRequest, a, b);
    }
}
QueryAggregateVotesRequest.runtime = proto3;
QueryAggregateVotesRequest.typeName = "kujira.oracle.QueryAggregateVotesRequest";
QueryAggregateVotesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryAggregateVotesResponse is response type for the
 * Query/AggregateVotes RPC method.
 *
 * @generated from message kujira.oracle.QueryAggregateVotesResponse
 */
export class QueryAggregateVotesResponse extends Message {
    constructor(data) {
        super();
        /**
         * aggregate_votes defines all oracle aggregate votes submitted in the current vote period
         *
         * @generated from field: repeated kujira.oracle.AggregateExchangeRateVote aggregate_votes = 1;
         */
        this.aggregateVotes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAggregateVotesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAggregateVotesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAggregateVotesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAggregateVotesResponse, a, b);
    }
}
QueryAggregateVotesResponse.runtime = proto3;
QueryAggregateVotesResponse.typeName = "kujira.oracle.QueryAggregateVotesResponse";
QueryAggregateVotesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "aggregate_votes", kind: "message", T: AggregateExchangeRateVote, repeated: true },
]);
/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message kujira.oracle.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "kujira.oracle.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message kujira.oracle.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "kujira.oracle.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
//# sourceMappingURL=query_pb.js.map