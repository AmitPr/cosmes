// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file kujira/scheduler/query.proto (package kujira.scheduler, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Hook } from "./hook_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message kujira.scheduler.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "kujira.scheduler.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message kujira.scheduler.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "kujira.scheduler.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * @generated from message kujira.scheduler.QueryGetHookRequest
 */
export class QueryGetHookRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 id = 1;
         */
        this.id = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetHookRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetHookRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetHookRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetHookRequest, a, b);
    }
}
QueryGetHookRequest.runtime = proto3;
QueryGetHookRequest.typeName = "kujira.scheduler.QueryGetHookRequest";
QueryGetHookRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message kujira.scheduler.QueryGetHookResponse
 */
export class QueryGetHookResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetHookResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetHookResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetHookResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetHookResponse, a, b);
    }
}
QueryGetHookResponse.runtime = proto3;
QueryGetHookResponse.typeName = "kujira.scheduler.QueryGetHookResponse";
QueryGetHookResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "Hook", kind: "message", T: Hook },
]);
/**
 * @generated from message kujira.scheduler.QueryAllHookRequest
 */
export class QueryAllHookRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAllHookRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAllHookRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAllHookRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAllHookRequest, a, b);
    }
}
QueryAllHookRequest.runtime = proto3;
QueryAllHookRequest.typeName = "kujira.scheduler.QueryAllHookRequest";
QueryAllHookRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * @generated from message kujira.scheduler.QueryAllHookResponse
 */
export class QueryAllHookResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated kujira.scheduler.Hook Hook = 1;
         */
        this.Hook = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAllHookResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAllHookResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAllHookResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAllHookResponse, a, b);
    }
}
QueryAllHookResponse.runtime = proto3;
QueryAllHookResponse.typeName = "kujira.scheduler.QueryAllHookResponse";
QueryAllHookResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "Hook", kind: "message", T: Hook, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
//# sourceMappingURL=query_pb.js.map