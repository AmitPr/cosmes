// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file kujira/denom/genesis.proto (package kujira.denom, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { DenomAuthorityMetadata } from "./authorityMetadata_pb.js";
/**
 * GenesisState defines the denom module's genesis state.
 *
 * @generated from message kujira.denom.GenesisState
 */
export class GenesisState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated kujira.denom.GenesisDenom factory_denoms = 2;
         */
        this.factoryDenoms = [];
        /**
         * whitelisted accounts that do not require paying creation fees
         *
         * @generated from field: repeated string no_fee_accounts = 3;
         */
        this.noFeeAccounts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisState, a, b);
    }
}
GenesisState.runtime = proto3;
GenesisState.typeName = "kujira.denom.GenesisState";
GenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "factory_denoms", kind: "message", T: GenesisDenom, repeated: true },
    { no: 3, name: "no_fee_accounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message kujira.denom.GenesisDenom
 */
export class GenesisDenom extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisDenom().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisDenom().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisDenom().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisDenom, a, b);
    }
}
GenesisDenom.runtime = proto3;
GenesisDenom.typeName = "kujira.denom.GenesisDenom";
GenesisDenom.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "authority_metadata", kind: "message", T: DenomAuthorityMetadata },
]);
//# sourceMappingURL=genesis_pb.js.map