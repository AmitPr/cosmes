// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file kujira/denom/tx.proto (package kujira.denom, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
/**
 * @generated from message kujira.denom.MsgAddNoFeeAccounts
 */
export class MsgAddNoFeeAccounts extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        /**
         * @generated from field: repeated string accounts = 2;
         */
        this.accounts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgAddNoFeeAccounts().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgAddNoFeeAccounts().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgAddNoFeeAccounts().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgAddNoFeeAccounts, a, b);
    }
}
MsgAddNoFeeAccounts.runtime = proto3;
MsgAddNoFeeAccounts.typeName = "kujira.denom.MsgAddNoFeeAccounts";
MsgAddNoFeeAccounts.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "accounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message kujira.denom.MsgAddNoFeeAccountsResponse
 */
export class MsgAddNoFeeAccountsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgAddNoFeeAccountsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgAddNoFeeAccountsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgAddNoFeeAccountsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgAddNoFeeAccountsResponse, a, b);
    }
}
MsgAddNoFeeAccountsResponse.runtime = proto3;
MsgAddNoFeeAccountsResponse.typeName = "kujira.denom.MsgAddNoFeeAccountsResponse";
MsgAddNoFeeAccountsResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message kujira.denom.MsgRemoveNoFeeAccounts
 */
export class MsgRemoveNoFeeAccounts extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        /**
         * @generated from field: repeated string accounts = 2;
         */
        this.accounts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgRemoveNoFeeAccounts().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgRemoveNoFeeAccounts().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgRemoveNoFeeAccounts().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgRemoveNoFeeAccounts, a, b);
    }
}
MsgRemoveNoFeeAccounts.runtime = proto3;
MsgRemoveNoFeeAccounts.typeName = "kujira.denom.MsgRemoveNoFeeAccounts";
MsgRemoveNoFeeAccounts.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "accounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message kujira.denom.MsgRemoveNoFeeAccountsResponse
 */
export class MsgRemoveNoFeeAccountsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgRemoveNoFeeAccountsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgRemoveNoFeeAccountsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgRemoveNoFeeAccountsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgRemoveNoFeeAccountsResponse, a, b);
    }
}
MsgRemoveNoFeeAccountsResponse.runtime = proto3;
MsgRemoveNoFeeAccountsResponse.typeName = "kujira.denom.MsgRemoveNoFeeAccountsResponse";
MsgRemoveNoFeeAccountsResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgCreateDenom is the sdk.Msg type for allowing an account to create
 * a new denom.  It requires a sender address and a unique nonce
 * (to allow accounts to create multiple denoms)
 *
 * @generated from message kujira.denom.MsgCreateDenom
 */
export class MsgCreateDenom extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string nonce = 2;
         */
        this.nonce = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateDenom().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateDenom().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateDenom().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateDenom, a, b);
    }
}
MsgCreateDenom.runtime = proto3;
MsgCreateDenom.typeName = "kujira.denom.MsgCreateDenom";
MsgCreateDenom.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgCreateDenomResponse is the return value of MsgCreateDenom
 * It returns the full string of the newly created denom
 *
 * @generated from message kujira.denom.MsgCreateDenomResponse
 */
export class MsgCreateDenomResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string new_token_denom = 1;
         */
        this.newTokenDenom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateDenomResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateDenomResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateDenomResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateDenomResponse, a, b);
    }
}
MsgCreateDenomResponse.runtime = proto3;
MsgCreateDenomResponse.typeName = "kujira.denom.MsgCreateDenomResponse";
MsgCreateDenomResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "new_token_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgMint is the sdk.Msg type for allowing an admin account to mint
 * more of a token.
 *
 * @generated from message kujira.denom.MsgMint
 */
export class MsgMint extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string recipient = 3;
         */
        this.recipient = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgMint().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgMint().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgMint().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgMint, a, b);
    }
}
MsgMint.runtime = proto3;
MsgMint.typeName = "kujira.denom.MsgMint";
MsgMint.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
    { no: 3, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message kujira.denom.MsgMintResponse
 */
export class MsgMintResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgMintResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgMintResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgMintResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgMintResponse, a, b);
    }
}
MsgMintResponse.runtime = proto3;
MsgMintResponse.typeName = "kujira.denom.MsgMintResponse";
MsgMintResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgBurn is the sdk.Msg type for allowing an admin account to burn
 * a token.  For now, we only support burning from the sender account.
 *
 * @generated from message kujira.denom.MsgBurn
 */
export class MsgBurn extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBurn().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBurn().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBurn().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBurn, a, b);
    }
}
MsgBurn.runtime = proto3;
MsgBurn.typeName = "kujira.denom.MsgBurn";
MsgBurn.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
]);
/**
 * @generated from message kujira.denom.MsgBurnResponse
 */
export class MsgBurnResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBurnResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBurnResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBurnResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBurnResponse, a, b);
    }
}
MsgBurnResponse.runtime = proto3;
MsgBurnResponse.typeName = "kujira.denom.MsgBurnResponse";
MsgBurnResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgChangeAdmin is the sdk.Msg type for allowing an admin account to reassign
 * adminship of a denom to a new account
 *
 * @generated from message kujira.denom.MsgChangeAdmin
 */
export class MsgChangeAdmin extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string denom = 2;
         */
        this.denom = "";
        /**
         * @generated from field: string newAdmin = 3;
         */
        this.newAdmin = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgChangeAdmin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgChangeAdmin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgChangeAdmin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgChangeAdmin, a, b);
    }
}
MsgChangeAdmin.runtime = proto3;
MsgChangeAdmin.typeName = "kujira.denom.MsgChangeAdmin";
MsgChangeAdmin.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "newAdmin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message kujira.denom.MsgChangeAdminResponse
 */
export class MsgChangeAdminResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgChangeAdminResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgChangeAdminResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgChangeAdminResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgChangeAdminResponse, a, b);
    }
}
MsgChangeAdminResponse.runtime = proto3;
MsgChangeAdminResponse.typeName = "kujira.denom.MsgChangeAdminResponse";
MsgChangeAdminResponse.fields = proto3.util.newFieldList(() => []);
//# sourceMappingURL=tx_pb.js.map