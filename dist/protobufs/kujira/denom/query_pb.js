// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file kujira/denom/query.proto (package kujira.denom, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { DenomAuthorityMetadata } from "./authorityMetadata_pb.js";
/**
 * QueryNoFeeAccountsRequest is the request type for the Query/NoFeeAccounts RPC method.
 *
 * @generated from message kujira.denom.QueryNoFeeAccountsRequest
 */
export class QueryNoFeeAccountsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryNoFeeAccountsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryNoFeeAccountsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryNoFeeAccountsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryNoFeeAccountsRequest, a, b);
    }
}
QueryNoFeeAccountsRequest.runtime = proto3;
QueryNoFeeAccountsRequest.typeName = "kujira.denom.QueryNoFeeAccountsRequest";
QueryNoFeeAccountsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryNoFeeAccountsResponse is the response type for the Query/NoFeeAccounts RPC method.
 *
 * @generated from message kujira.denom.QueryNoFeeAccountsResponse
 */
export class QueryNoFeeAccountsResponse extends Message {
    constructor(data) {
        super();
        /**
         * params defines the parameters of the module.
         *
         * @generated from field: repeated string accounts = 1;
         */
        this.accounts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryNoFeeAccountsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryNoFeeAccountsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryNoFeeAccountsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryNoFeeAccountsResponse, a, b);
    }
}
QueryNoFeeAccountsResponse.runtime = proto3;
QueryNoFeeAccountsResponse.typeName = "kujira.denom.QueryNoFeeAccountsResponse";
QueryNoFeeAccountsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message kujira.denom.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "kujira.denom.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message kujira.denom.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "kujira.denom.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * @generated from message kujira.denom.QueryDenomAuthorityMetadataRequest
 */
export class QueryDenomAuthorityMetadataRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomAuthorityMetadataRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomAuthorityMetadataRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomAuthorityMetadataRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomAuthorityMetadataRequest, a, b);
    }
}
QueryDenomAuthorityMetadataRequest.runtime = proto3;
QueryDenomAuthorityMetadataRequest.typeName = "kujira.denom.QueryDenomAuthorityMetadataRequest";
QueryDenomAuthorityMetadataRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message kujira.denom.QueryDenomAuthorityMetadataResponse
 */
export class QueryDenomAuthorityMetadataResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomAuthorityMetadataResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomAuthorityMetadataResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomAuthorityMetadataResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomAuthorityMetadataResponse, a, b);
    }
}
QueryDenomAuthorityMetadataResponse.runtime = proto3;
QueryDenomAuthorityMetadataResponse.typeName = "kujira.denom.QueryDenomAuthorityMetadataResponse";
QueryDenomAuthorityMetadataResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority_metadata", kind: "message", T: DenomAuthorityMetadata },
]);
/**
 * @generated from message kujira.denom.QueryDenomsFromCreatorRequest
 */
export class QueryDenomsFromCreatorRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string creator = 1;
         */
        this.creator = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomsFromCreatorRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomsFromCreatorRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomsFromCreatorRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomsFromCreatorRequest, a, b);
    }
}
QueryDenomsFromCreatorRequest.runtime = proto3;
QueryDenomsFromCreatorRequest.typeName = "kujira.denom.QueryDenomsFromCreatorRequest";
QueryDenomsFromCreatorRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message kujira.denom.QueryDenomsFromCreatorResponse
 */
export class QueryDenomsFromCreatorResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string denoms = 1;
         */
        this.denoms = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomsFromCreatorResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomsFromCreatorResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomsFromCreatorResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomsFromCreatorResponse, a, b);
    }
}
QueryDenomsFromCreatorResponse.runtime = proto3;
QueryDenomsFromCreatorResponse.typeName = "kujira.denom.QueryDenomsFromCreatorResponse";
QueryDenomsFromCreatorResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
//# sourceMappingURL=query_pb.js.map