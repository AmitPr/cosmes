// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/gamm/v1beta1/gov.proto (package osmosis.gamm.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { BalancerToConcentratedPoolLink } from "./shared_pb.js";

/**
 * ReplaceMigrationRecordsProposal is a gov Content type for updating the
 * migration records. If a ReplaceMigrationRecordsProposal passes, the
 * proposalâ€™s records override the existing MigrationRecords set in the module.
 * Each record specifies a single connection between a single balancer pool and
 * a single concentrated pool.
 *
 * @generated from message osmosis.gamm.v1beta1.ReplaceMigrationRecordsProposal
 */
export class ReplaceMigrationRecordsProposal extends Message<ReplaceMigrationRecordsProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated osmosis.gamm.v1beta1.BalancerToConcentratedPoolLink records = 3;
   */
  records: BalancerToConcentratedPoolLink[] = [];

  constructor(data?: PartialMessage<ReplaceMigrationRecordsProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.ReplaceMigrationRecordsProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "records", kind: "message", T: BalancerToConcentratedPoolLink, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplaceMigrationRecordsProposal {
    return new ReplaceMigrationRecordsProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplaceMigrationRecordsProposal {
    return new ReplaceMigrationRecordsProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplaceMigrationRecordsProposal {
    return new ReplaceMigrationRecordsProposal().fromJsonString(jsonString, options);
  }

  static equals(a: ReplaceMigrationRecordsProposal | PlainMessage<ReplaceMigrationRecordsProposal> | undefined, b: ReplaceMigrationRecordsProposal | PlainMessage<ReplaceMigrationRecordsProposal> | undefined): boolean {
    return proto3.util.equals(ReplaceMigrationRecordsProposal, a, b);
  }
}

/**
 * For example: if the existing DistrRecords were:
 * [(Balancer 1, CL 5), (Balancer 2, CL 6), (Balancer 3, CL 7)]
 * And an UpdateMigrationRecordsProposal includes
 * [(Balancer 2, CL 0), (Balancer 3, CL 4), (Balancer 4, CL 10)]
 * This would leave Balancer 1 record, delete Balancer 2 record,
 * Edit Balancer 3 record, and Add Balancer 4 record
 * The result MigrationRecords in state would be:
 * [(Balancer 1, CL 5), (Balancer 3, CL 4), (Balancer 4, CL 10)]
 *
 * @generated from message osmosis.gamm.v1beta1.UpdateMigrationRecordsProposal
 */
export class UpdateMigrationRecordsProposal extends Message<UpdateMigrationRecordsProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated osmosis.gamm.v1beta1.BalancerToConcentratedPoolLink records = 3;
   */
  records: BalancerToConcentratedPoolLink[] = [];

  constructor(data?: PartialMessage<UpdateMigrationRecordsProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.UpdateMigrationRecordsProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "records", kind: "message", T: BalancerToConcentratedPoolLink, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMigrationRecordsProposal {
    return new UpdateMigrationRecordsProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMigrationRecordsProposal {
    return new UpdateMigrationRecordsProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMigrationRecordsProposal {
    return new UpdateMigrationRecordsProposal().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMigrationRecordsProposal | PlainMessage<UpdateMigrationRecordsProposal> | undefined, b: UpdateMigrationRecordsProposal | PlainMessage<UpdateMigrationRecordsProposal> | undefined): boolean {
    return proto3.util.equals(UpdateMigrationRecordsProposal, a, b);
  }
}

