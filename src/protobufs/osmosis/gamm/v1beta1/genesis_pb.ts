// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/gamm/v1beta1/genesis.proto (package osmosis.gamm.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params holds parameters for the incentives module
 *
 * @generated from message osmosis.gamm.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin pool_creation_fee = 1;
   */
  poolCreationFee: Coin[] = [];

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_creation_fee", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * GenesisState defines the gamm module's genesis state.
 *
 * @generated from message osmosis.gamm.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: repeated google.protobuf.Any pools = 1;
   */
  pools: Any[] = [];

  /**
   * will be renamed to next_pool_id in an upcoming version
   *
   * @generated from field: uint64 next_pool_number = 2;
   */
  nextPoolNumber = protoInt64.zero;

  /**
   * @generated from field: osmosis.gamm.v1beta1.Params params = 3;
   */
  params?: Params;

  /**
   * @generated from field: osmosis.gamm.v1beta1.MigrationRecords migration_records = 4;
   */
  migrationRecords?: MigrationRecords;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Any, repeated: true },
    { no: 2, name: "next_pool_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "params", kind: "message", T: Params },
    { no: 4, name: "migration_records", kind: "message", T: MigrationRecords },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * MigrationRecords contains all the links between balancer and concentrated
 * pools
 *
 * @generated from message osmosis.gamm.v1beta1.MigrationRecords
 */
export class MigrationRecords extends Message<MigrationRecords> {
  /**
   * @generated from field: repeated osmosis.gamm.v1beta1.BalancerToConcentratedPoolLink balancer_to_concentrated_pool_links = 1;
   */
  balancerToConcentratedPoolLinks: BalancerToConcentratedPoolLink[] = [];

  constructor(data?: PartialMessage<MigrationRecords>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.MigrationRecords";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balancer_to_concentrated_pool_links", kind: "message", T: BalancerToConcentratedPoolLink, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrationRecords {
    return new MigrationRecords().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrationRecords {
    return new MigrationRecords().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrationRecords {
    return new MigrationRecords().fromJsonString(jsonString, options);
  }

  static equals(a: MigrationRecords | PlainMessage<MigrationRecords> | undefined, b: MigrationRecords | PlainMessage<MigrationRecords> | undefined): boolean {
    return proto3.util.equals(MigrationRecords, a, b);
  }
}

/**
 * BalancerToConcentratedPoolLink defines a single link between a single
 * balancer pool and a single concentrated liquidity pool. This link is used to
 * allow a balancer pool to migrate to a single canonical full range
 * concentrated liquidity pool position
 * A balancer pool can be linked to a maximum of one cl pool, and a cl pool can
 * be linked to a maximum of one balancer pool.
 *
 * @generated from message osmosis.gamm.v1beta1.BalancerToConcentratedPoolLink
 */
export class BalancerToConcentratedPoolLink extends Message<BalancerToConcentratedPoolLink> {
  /**
   * @generated from field: uint64 balancer_pool_id = 1;
   */
  balancerPoolId = protoInt64.zero;

  /**
   * @generated from field: uint64 cl_pool_id = 2;
   */
  clPoolId = protoInt64.zero;

  constructor(data?: PartialMessage<BalancerToConcentratedPoolLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.BalancerToConcentratedPoolLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balancer_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "cl_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BalancerToConcentratedPoolLink {
    return new BalancerToConcentratedPoolLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BalancerToConcentratedPoolLink {
    return new BalancerToConcentratedPoolLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BalancerToConcentratedPoolLink {
    return new BalancerToConcentratedPoolLink().fromJsonString(jsonString, options);
  }

  static equals(a: BalancerToConcentratedPoolLink | PlainMessage<BalancerToConcentratedPoolLink> | undefined, b: BalancerToConcentratedPoolLink | PlainMessage<BalancerToConcentratedPoolLink> | undefined): boolean {
    return proto3.util.equals(BalancerToConcentratedPoolLink, a, b);
  }
}

