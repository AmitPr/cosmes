// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file kujira/denom/tx.proto (package kujira.denom, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message kujira.denom.MsgAddNoFeeAccounts
 */
export class MsgAddNoFeeAccounts extends Message<MsgAddNoFeeAccounts> {
  /**
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * @generated from field: repeated string accounts = 2;
   */
  accounts: string[] = [];

  constructor(data?: PartialMessage<MsgAddNoFeeAccounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.denom.MsgAddNoFeeAccounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "accounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddNoFeeAccounts {
    return new MsgAddNoFeeAccounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddNoFeeAccounts {
    return new MsgAddNoFeeAccounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddNoFeeAccounts {
    return new MsgAddNoFeeAccounts().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddNoFeeAccounts | PlainMessage<MsgAddNoFeeAccounts> | undefined, b: MsgAddNoFeeAccounts | PlainMessage<MsgAddNoFeeAccounts> | undefined): boolean {
    return proto3.util.equals(MsgAddNoFeeAccounts, a, b);
  }
}

/**
 * @generated from message kujira.denom.MsgAddNoFeeAccountsResponse
 */
export class MsgAddNoFeeAccountsResponse extends Message<MsgAddNoFeeAccountsResponse> {
  constructor(data?: PartialMessage<MsgAddNoFeeAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.denom.MsgAddNoFeeAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddNoFeeAccountsResponse {
    return new MsgAddNoFeeAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddNoFeeAccountsResponse {
    return new MsgAddNoFeeAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddNoFeeAccountsResponse {
    return new MsgAddNoFeeAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddNoFeeAccountsResponse | PlainMessage<MsgAddNoFeeAccountsResponse> | undefined, b: MsgAddNoFeeAccountsResponse | PlainMessage<MsgAddNoFeeAccountsResponse> | undefined): boolean {
    return proto3.util.equals(MsgAddNoFeeAccountsResponse, a, b);
  }
}

/**
 * @generated from message kujira.denom.MsgRemoveNoFeeAccounts
 */
export class MsgRemoveNoFeeAccounts extends Message<MsgRemoveNoFeeAccounts> {
  /**
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * @generated from field: repeated string accounts = 2;
   */
  accounts: string[] = [];

  constructor(data?: PartialMessage<MsgRemoveNoFeeAccounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.denom.MsgRemoveNoFeeAccounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "accounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveNoFeeAccounts {
    return new MsgRemoveNoFeeAccounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveNoFeeAccounts {
    return new MsgRemoveNoFeeAccounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveNoFeeAccounts {
    return new MsgRemoveNoFeeAccounts().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveNoFeeAccounts | PlainMessage<MsgRemoveNoFeeAccounts> | undefined, b: MsgRemoveNoFeeAccounts | PlainMessage<MsgRemoveNoFeeAccounts> | undefined): boolean {
    return proto3.util.equals(MsgRemoveNoFeeAccounts, a, b);
  }
}

/**
 * @generated from message kujira.denom.MsgRemoveNoFeeAccountsResponse
 */
export class MsgRemoveNoFeeAccountsResponse extends Message<MsgRemoveNoFeeAccountsResponse> {
  constructor(data?: PartialMessage<MsgRemoveNoFeeAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.denom.MsgRemoveNoFeeAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveNoFeeAccountsResponse {
    return new MsgRemoveNoFeeAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveNoFeeAccountsResponse {
    return new MsgRemoveNoFeeAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveNoFeeAccountsResponse {
    return new MsgRemoveNoFeeAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveNoFeeAccountsResponse | PlainMessage<MsgRemoveNoFeeAccountsResponse> | undefined, b: MsgRemoveNoFeeAccountsResponse | PlainMessage<MsgRemoveNoFeeAccountsResponse> | undefined): boolean {
    return proto3.util.equals(MsgRemoveNoFeeAccountsResponse, a, b);
  }
}

/**
 * MsgCreateDenom is the sdk.Msg type for allowing an account to create
 * a new denom.  It requires a sender address and a unique nonce
 * (to allow accounts to create multiple denoms)
 *
 * @generated from message kujira.denom.MsgCreateDenom
 */
export class MsgCreateDenom extends Message<MsgCreateDenom> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string nonce = 2;
   */
  nonce = "";

  constructor(data?: PartialMessage<MsgCreateDenom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.denom.MsgCreateDenom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateDenom {
    return new MsgCreateDenom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateDenom {
    return new MsgCreateDenom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateDenom {
    return new MsgCreateDenom().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateDenom | PlainMessage<MsgCreateDenom> | undefined, b: MsgCreateDenom | PlainMessage<MsgCreateDenom> | undefined): boolean {
    return proto3.util.equals(MsgCreateDenom, a, b);
  }
}

/**
 * MsgCreateDenomResponse is the return value of MsgCreateDenom
 * It returns the full string of the newly created denom
 *
 * @generated from message kujira.denom.MsgCreateDenomResponse
 */
export class MsgCreateDenomResponse extends Message<MsgCreateDenomResponse> {
  /**
   * @generated from field: string new_token_denom = 1;
   */
  newTokenDenom = "";

  constructor(data?: PartialMessage<MsgCreateDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.denom.MsgCreateDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_token_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateDenomResponse {
    return new MsgCreateDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateDenomResponse {
    return new MsgCreateDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateDenomResponse {
    return new MsgCreateDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateDenomResponse | PlainMessage<MsgCreateDenomResponse> | undefined, b: MsgCreateDenomResponse | PlainMessage<MsgCreateDenomResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateDenomResponse, a, b);
  }
}

/**
 * MsgMint is the sdk.Msg type for allowing an admin account to mint
 * more of a token. 
 *
 * @generated from message kujira.denom.MsgMint
 */
export class MsgMint extends Message<MsgMint> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  /**
   * @generated from field: string recipient = 3;
   */
  recipient = "";

  constructor(data?: PartialMessage<MsgMint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.denom.MsgMint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
    { no: 3, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMint {
    return new MsgMint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMint {
    return new MsgMint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMint {
    return new MsgMint().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMint | PlainMessage<MsgMint> | undefined, b: MsgMint | PlainMessage<MsgMint> | undefined): boolean {
    return proto3.util.equals(MsgMint, a, b);
  }
}

/**
 * @generated from message kujira.denom.MsgMintResponse
 */
export class MsgMintResponse extends Message<MsgMintResponse> {
  constructor(data?: PartialMessage<MsgMintResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.denom.MsgMintResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMintResponse {
    return new MsgMintResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMintResponse {
    return new MsgMintResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMintResponse {
    return new MsgMintResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMintResponse | PlainMessage<MsgMintResponse> | undefined, b: MsgMintResponse | PlainMessage<MsgMintResponse> | undefined): boolean {
    return proto3.util.equals(MsgMintResponse, a, b);
  }
}

/**
 * MsgBurn is the sdk.Msg type for allowing an admin account to burn
 * a token.  For now, we only support burning from the sender account.
 *
 * @generated from message kujira.denom.MsgBurn
 */
export class MsgBurn extends Message<MsgBurn> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgBurn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.denom.MsgBurn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBurn {
    return new MsgBurn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBurn {
    return new MsgBurn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBurn {
    return new MsgBurn().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBurn | PlainMessage<MsgBurn> | undefined, b: MsgBurn | PlainMessage<MsgBurn> | undefined): boolean {
    return proto3.util.equals(MsgBurn, a, b);
  }
}

/**
 * @generated from message kujira.denom.MsgBurnResponse
 */
export class MsgBurnResponse extends Message<MsgBurnResponse> {
  constructor(data?: PartialMessage<MsgBurnResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.denom.MsgBurnResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBurnResponse {
    return new MsgBurnResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBurnResponse {
    return new MsgBurnResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBurnResponse {
    return new MsgBurnResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBurnResponse | PlainMessage<MsgBurnResponse> | undefined, b: MsgBurnResponse | PlainMessage<MsgBurnResponse> | undefined): boolean {
    return proto3.util.equals(MsgBurnResponse, a, b);
  }
}

/**
 * MsgChangeAdmin is the sdk.Msg type for allowing an admin account to reassign
 * adminship of a denom to a new account
 *
 * @generated from message kujira.denom.MsgChangeAdmin
 */
export class MsgChangeAdmin extends Message<MsgChangeAdmin> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string newAdmin = 3;
   */
  newAdmin = "";

  constructor(data?: PartialMessage<MsgChangeAdmin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.denom.MsgChangeAdmin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "newAdmin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChangeAdmin {
    return new MsgChangeAdmin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChangeAdmin {
    return new MsgChangeAdmin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChangeAdmin {
    return new MsgChangeAdmin().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChangeAdmin | PlainMessage<MsgChangeAdmin> | undefined, b: MsgChangeAdmin | PlainMessage<MsgChangeAdmin> | undefined): boolean {
    return proto3.util.equals(MsgChangeAdmin, a, b);
  }
}

/**
 * @generated from message kujira.denom.MsgChangeAdminResponse
 */
export class MsgChangeAdminResponse extends Message<MsgChangeAdminResponse> {
  constructor(data?: PartialMessage<MsgChangeAdminResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.denom.MsgChangeAdminResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgChangeAdminResponse {
    return new MsgChangeAdminResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgChangeAdminResponse {
    return new MsgChangeAdminResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgChangeAdminResponse {
    return new MsgChangeAdminResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgChangeAdminResponse | PlainMessage<MsgChangeAdminResponse> | undefined, b: MsgChangeAdminResponse | PlainMessage<MsgChangeAdminResponse> | undefined): boolean {
    return proto3.util.equals(MsgChangeAdminResponse, a, b);
  }
}

