// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file kujira/scheduler/query.proto (package kujira.scheduler, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Hook } from "./hook_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message kujira.scheduler.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.scheduler.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message kujira.scheduler.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: kujira.scheduler.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.scheduler.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message kujira.scheduler.QueryGetHookRequest
 */
export class QueryGetHookRequest extends Message<QueryGetHookRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetHookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.scheduler.QueryGetHookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetHookRequest {
    return new QueryGetHookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetHookRequest {
    return new QueryGetHookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetHookRequest {
    return new QueryGetHookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetHookRequest | PlainMessage<QueryGetHookRequest> | undefined, b: QueryGetHookRequest | PlainMessage<QueryGetHookRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetHookRequest, a, b);
  }
}

/**
 * @generated from message kujira.scheduler.QueryGetHookResponse
 */
export class QueryGetHookResponse extends Message<QueryGetHookResponse> {
  /**
   * @generated from field: kujira.scheduler.Hook Hook = 1;
   */
  Hook?: Hook;

  constructor(data?: PartialMessage<QueryGetHookResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.scheduler.QueryGetHookResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Hook", kind: "message", T: Hook },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetHookResponse {
    return new QueryGetHookResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetHookResponse {
    return new QueryGetHookResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetHookResponse {
    return new QueryGetHookResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetHookResponse | PlainMessage<QueryGetHookResponse> | undefined, b: QueryGetHookResponse | PlainMessage<QueryGetHookResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetHookResponse, a, b);
  }
}

/**
 * @generated from message kujira.scheduler.QueryAllHookRequest
 */
export class QueryAllHookRequest extends Message<QueryAllHookRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllHookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.scheduler.QueryAllHookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllHookRequest {
    return new QueryAllHookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllHookRequest {
    return new QueryAllHookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllHookRequest {
    return new QueryAllHookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllHookRequest | PlainMessage<QueryAllHookRequest> | undefined, b: QueryAllHookRequest | PlainMessage<QueryAllHookRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllHookRequest, a, b);
  }
}

/**
 * @generated from message kujira.scheduler.QueryAllHookResponse
 */
export class QueryAllHookResponse extends Message<QueryAllHookResponse> {
  /**
   * @generated from field: repeated kujira.scheduler.Hook Hook = 1;
   */
  Hook: Hook[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllHookResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.scheduler.QueryAllHookResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Hook", kind: "message", T: Hook, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllHookResponse {
    return new QueryAllHookResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllHookResponse {
    return new QueryAllHookResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllHookResponse {
    return new QueryAllHookResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllHookResponse | PlainMessage<QueryAllHookResponse> | undefined, b: QueryAllHookResponse | PlainMessage<QueryAllHookResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllHookResponse, a, b);
  }
}

