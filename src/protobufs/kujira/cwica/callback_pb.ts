// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kujira/cwica/callback.proto (package kujira.cwica, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message kujira.cwica.CallbackData
 */
export class CallbackData extends Message<CallbackData> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  /**
   * @generated from field: string contract = 4;
   */
  contract = "";

  /**
   * @generated from field: string connection_id = 5;
   */
  connectionId = "";

  /**
   * @generated from field: string account_id = 6;
   */
  accountId = "";

  /**
   * @generated from field: bytes callback = 7;
   */
  callback = new Uint8Array(0);

  constructor(data?: PartialMessage<CallbackData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kujira.cwica.CallbackData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "callback", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallbackData {
    return new CallbackData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallbackData {
    return new CallbackData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallbackData {
    return new CallbackData().fromJsonString(jsonString, options);
  }

  static equals(a: CallbackData | PlainMessage<CallbackData> | undefined, b: CallbackData | PlainMessage<CallbackData> | undefined): boolean {
    return proto3.util.equals(CallbackData, a, b);
  }
}

