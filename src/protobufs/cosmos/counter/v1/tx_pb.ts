// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/counter/v1/tx.proto (package cosmos.counter.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * MsgIncreaseCounter defines a count Msg service counter.
 *
 * @generated from message cosmos.counter.v1.MsgIncreaseCounter
 */
export class MsgIncreaseCounter extends Message<MsgIncreaseCounter> {
  /**
   * signer is the address that controls the module (defaults to x/gov unless overwritten).
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * count is the number of times to increment the counter.
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<MsgIncreaseCounter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.counter.v1.MsgIncreaseCounter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgIncreaseCounter {
    return new MsgIncreaseCounter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgIncreaseCounter {
    return new MsgIncreaseCounter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgIncreaseCounter {
    return new MsgIncreaseCounter().fromJsonString(jsonString, options);
  }

  static equals(a: MsgIncreaseCounter | PlainMessage<MsgIncreaseCounter> | undefined, b: MsgIncreaseCounter | PlainMessage<MsgIncreaseCounter> | undefined): boolean {
    return proto3.util.equals(MsgIncreaseCounter, a, b);
  }
}

/**
 * MsgIncreaseCountResponse is the Msg/Counter response type.
 *
 * @generated from message cosmos.counter.v1.MsgIncreaseCountResponse
 */
export class MsgIncreaseCountResponse extends Message<MsgIncreaseCountResponse> {
  /**
   * new_count is the number of times the counter was incremented.
   *
   * @generated from field: int64 new_count = 1;
   */
  newCount = protoInt64.zero;

  constructor(data?: PartialMessage<MsgIncreaseCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.counter.v1.MsgIncreaseCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgIncreaseCountResponse {
    return new MsgIncreaseCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgIncreaseCountResponse {
    return new MsgIncreaseCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgIncreaseCountResponse {
    return new MsgIncreaseCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgIncreaseCountResponse | PlainMessage<MsgIncreaseCountResponse> | undefined, b: MsgIncreaseCountResponse | PlainMessage<MsgIncreaseCountResponse> | undefined): boolean {
    return proto3.util.equals(MsgIncreaseCountResponse, a, b);
  }
}

