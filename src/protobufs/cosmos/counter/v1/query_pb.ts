// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/counter/v1/query.proto (package cosmos.counter.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * QueryGetCountRequest defines the request type for querying x/mock count.
 *
 * @generated from message cosmos.counter.v1.QueryGetCountRequest
 */
export class QueryGetCountRequest extends Message<QueryGetCountRequest> {
  constructor(data?: PartialMessage<QueryGetCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.counter.v1.QueryGetCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetCountRequest {
    return new QueryGetCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetCountRequest {
    return new QueryGetCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetCountRequest {
    return new QueryGetCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetCountRequest | PlainMessage<QueryGetCountRequest> | undefined, b: QueryGetCountRequest | PlainMessage<QueryGetCountRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetCountRequest, a, b);
  }
}

/**
 * QueryGetCountResponse defines the response type for querying x/mock count.
 *
 * @generated from message cosmos.counter.v1.QueryGetCountResponse
 */
export class QueryGetCountResponse extends Message<QueryGetCountResponse> {
  /**
   * @generated from field: int64 total_count = 1;
   */
  totalCount = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.counter.v1.QueryGetCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetCountResponse {
    return new QueryGetCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetCountResponse {
    return new QueryGetCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetCountResponse {
    return new QueryGetCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetCountResponse | PlainMessage<QueryGetCountResponse> | undefined, b: QueryGetCountResponse | PlainMessage<QueryGetCountResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetCountResponse, a, b);
  }
}

