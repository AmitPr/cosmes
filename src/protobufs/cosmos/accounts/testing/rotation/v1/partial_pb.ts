// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/accounts/testing/rotation/v1/partial.proto (package cosmos.accounts.testing.rotation.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * MsgInit is the init message used to create a new account
 * abstraction implementation that we use for testing, this account
 * also allows for rotating the public key.
 *
 * @generated from message cosmos.accounts.testing.rotation.v1.MsgInit
 */
export class MsgInit extends Message<MsgInit> {
  /**
   * @generated from field: bytes pub_key_bytes = 1;
   */
  pubKeyBytes = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgInit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.testing.rotation.v1.MsgInit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pub_key_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInit {
    return new MsgInit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInit {
    return new MsgInit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInit {
    return new MsgInit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInit | PlainMessage<MsgInit> | undefined, b: MsgInit | PlainMessage<MsgInit> | undefined): boolean {
    return proto3.util.equals(MsgInit, a, b);
  }
}

/**
 * MsgInitResponse is the init message response.
 *
 * @generated from message cosmos.accounts.testing.rotation.v1.MsgInitResponse
 */
export class MsgInitResponse extends Message<MsgInitResponse> {
  constructor(data?: PartialMessage<MsgInitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.testing.rotation.v1.MsgInitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInitResponse {
    return new MsgInitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInitResponse {
    return new MsgInitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInitResponse {
    return new MsgInitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInitResponse | PlainMessage<MsgInitResponse> | undefined, b: MsgInitResponse | PlainMessage<MsgInitResponse> | undefined): boolean {
    return proto3.util.equals(MsgInitResponse, a, b);
  }
}

/**
 * MsgRotatePubKey is the message used to swap the public key
 * of the account.
 *
 * @generated from message cosmos.accounts.testing.rotation.v1.MsgRotatePubKey
 */
export class MsgRotatePubKey extends Message<MsgRotatePubKey> {
  /**
   * @generated from field: bytes new_pub_key_bytes = 1;
   */
  newPubKeyBytes = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgRotatePubKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.testing.rotation.v1.MsgRotatePubKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_pub_key_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRotatePubKey {
    return new MsgRotatePubKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRotatePubKey {
    return new MsgRotatePubKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRotatePubKey {
    return new MsgRotatePubKey().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRotatePubKey | PlainMessage<MsgRotatePubKey> | undefined, b: MsgRotatePubKey | PlainMessage<MsgRotatePubKey> | undefined): boolean {
    return proto3.util.equals(MsgRotatePubKey, a, b);
  }
}

/**
 * MsgRotatePubKeyResponse is the MsgRotatePubKey response.
 *
 * @generated from message cosmos.accounts.testing.rotation.v1.MsgRotatePubKeyResponse
 */
export class MsgRotatePubKeyResponse extends Message<MsgRotatePubKeyResponse> {
  constructor(data?: PartialMessage<MsgRotatePubKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.testing.rotation.v1.MsgRotatePubKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRotatePubKeyResponse {
    return new MsgRotatePubKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRotatePubKeyResponse {
    return new MsgRotatePubKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRotatePubKeyResponse {
    return new MsgRotatePubKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRotatePubKeyResponse | PlainMessage<MsgRotatePubKeyResponse> | undefined, b: MsgRotatePubKeyResponse | PlainMessage<MsgRotatePubKeyResponse> | undefined): boolean {
    return proto3.util.equals(MsgRotatePubKeyResponse, a, b);
  }
}

