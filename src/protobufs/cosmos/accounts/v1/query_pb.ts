// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/accounts/v1/query.proto (package cosmos.accounts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * AccountQueryRequest is the request type for the Query/AccountQuery RPC
 *
 * @generated from message cosmos.accounts.v1.AccountQueryRequest
 */
export class AccountQueryRequest extends Message<AccountQueryRequest> {
  /**
   * target defines the account to be queried.
   *
   * @generated from field: string target = 1;
   */
  target = "";

  /**
   * request defines the query message being sent to the account.
   *
   * @generated from field: bytes request = 2;
   */
  request = new Uint8Array(0);

  constructor(data?: PartialMessage<AccountQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.AccountQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountQueryRequest {
    return new AccountQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountQueryRequest {
    return new AccountQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountQueryRequest {
    return new AccountQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountQueryRequest | PlainMessage<AccountQueryRequest> | undefined, b: AccountQueryRequest | PlainMessage<AccountQueryRequest> | undefined): boolean {
    return proto3.util.equals(AccountQueryRequest, a, b);
  }
}

/**
 * AccountQueryResponse is the response type for the Query/AccountQuery RPC method.
 *
 * @generated from message cosmos.accounts.v1.AccountQueryResponse
 */
export class AccountQueryResponse extends Message<AccountQueryResponse> {
  /**
   * response defines the query response of the account.
   *
   * @generated from field: bytes response = 1;
   */
  response = new Uint8Array(0);

  constructor(data?: PartialMessage<AccountQueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.AccountQueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountQueryResponse {
    return new AccountQueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountQueryResponse {
    return new AccountQueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountQueryResponse {
    return new AccountQueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountQueryResponse | PlainMessage<AccountQueryResponse> | undefined, b: AccountQueryResponse | PlainMessage<AccountQueryResponse> | undefined): boolean {
    return proto3.util.equals(AccountQueryResponse, a, b);
  }
}

/**
 * SchemaResponse is the response type for the Query/Schema RPC method.
 *
 * @generated from message cosmos.accounts.v1.SchemaRequest
 */
export class SchemaRequest extends Message<SchemaRequest> {
  /**
   * account_type defines the account type to query the schema for.
   *
   * @generated from field: string account_type = 1;
   */
  accountType = "";

  constructor(data?: PartialMessage<SchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.SchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemaRequest {
    return new SchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemaRequest {
    return new SchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemaRequest {
    return new SchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SchemaRequest | PlainMessage<SchemaRequest> | undefined, b: SchemaRequest | PlainMessage<SchemaRequest> | undefined): boolean {
    return proto3.util.equals(SchemaRequest, a, b);
  }
}

/**
 * SchemaResponse is the response type for the Query/Schema RPC method.
 *
 * @generated from message cosmos.accounts.v1.SchemaResponse
 */
export class SchemaResponse extends Message<SchemaResponse> {
  /**
   * init_schema defines the schema descriptor for the Init account method.
   *
   * @generated from field: cosmos.accounts.v1.SchemaResponse.Handler init_schema = 1;
   */
  initSchema?: SchemaResponse_Handler;

  /**
   * execute_handlers defines the schema descriptor for the Execute account method.
   *
   * @generated from field: repeated cosmos.accounts.v1.SchemaResponse.Handler execute_handlers = 2;
   */
  executeHandlers: SchemaResponse_Handler[] = [];

  /**
   * query_handlers defines the schema descriptor for the Query account method.
   *
   * @generated from field: repeated cosmos.accounts.v1.SchemaResponse.Handler query_handlers = 3;
   */
  queryHandlers: SchemaResponse_Handler[] = [];

  constructor(data?: PartialMessage<SchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.SchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "init_schema", kind: "message", T: SchemaResponse_Handler },
    { no: 2, name: "execute_handlers", kind: "message", T: SchemaResponse_Handler, repeated: true },
    { no: 3, name: "query_handlers", kind: "message", T: SchemaResponse_Handler, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemaResponse {
    return new SchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemaResponse {
    return new SchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemaResponse {
    return new SchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SchemaResponse | PlainMessage<SchemaResponse> | undefined, b: SchemaResponse | PlainMessage<SchemaResponse> | undefined): boolean {
    return proto3.util.equals(SchemaResponse, a, b);
  }
}

/**
 * Handler defines a schema descriptor for a handler.
 * Where request and response are names that can be used to lookup the
 * reflection descriptor.
 *
 * @generated from message cosmos.accounts.v1.SchemaResponse.Handler
 */
export class SchemaResponse_Handler extends Message<SchemaResponse_Handler> {
  /**
   * request is the request name
   *
   * @generated from field: string request = 1;
   */
  request = "";

  /**
   * response is the response name
   *
   * @generated from field: string response = 2;
   */
  response = "";

  constructor(data?: PartialMessage<SchemaResponse_Handler>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.SchemaResponse.Handler";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemaResponse_Handler {
    return new SchemaResponse_Handler().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemaResponse_Handler {
    return new SchemaResponse_Handler().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemaResponse_Handler {
    return new SchemaResponse_Handler().fromJsonString(jsonString, options);
  }

  static equals(a: SchemaResponse_Handler | PlainMessage<SchemaResponse_Handler> | undefined, b: SchemaResponse_Handler | PlainMessage<SchemaResponse_Handler> | undefined): boolean {
    return proto3.util.equals(SchemaResponse_Handler, a, b);
  }
}

/**
 * AccountTypeRequest is the request type for the Query/AccountType RPC method.
 *
 * @generated from message cosmos.accounts.v1.AccountTypeRequest
 */
export class AccountTypeRequest extends Message<AccountTypeRequest> {
  /**
   * address defines the address to query the account type for.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<AccountTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.AccountTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountTypeRequest {
    return new AccountTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountTypeRequest {
    return new AccountTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountTypeRequest {
    return new AccountTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountTypeRequest | PlainMessage<AccountTypeRequest> | undefined, b: AccountTypeRequest | PlainMessage<AccountTypeRequest> | undefined): boolean {
    return proto3.util.equals(AccountTypeRequest, a, b);
  }
}

/**
 * AccountTypeResponse is the response type for the Query/AccountType RPC method.
 *
 * @generated from message cosmos.accounts.v1.AccountTypeResponse
 */
export class AccountTypeResponse extends Message<AccountTypeResponse> {
  /**
   * account_type defines the account type for the address.
   *
   * @generated from field: string account_type = 1;
   */
  accountType = "";

  constructor(data?: PartialMessage<AccountTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.AccountTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountTypeResponse {
    return new AccountTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountTypeResponse {
    return new AccountTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountTypeResponse {
    return new AccountTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountTypeResponse | PlainMessage<AccountTypeResponse> | undefined, b: AccountTypeResponse | PlainMessage<AccountTypeResponse> | undefined): boolean {
    return proto3.util.equals(AccountTypeResponse, a, b);
  }
}

