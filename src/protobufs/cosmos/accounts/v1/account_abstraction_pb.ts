// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/accounts/v1/account_abstraction.proto (package cosmos.accounts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * UserOperation defines the type used to define a state transition that
 * an account wants to make.
 *
 * @generated from message cosmos.accounts.v1.UserOperation
 */
export class UserOperation extends Message<UserOperation> {
  /**
   * sender defines the account that is sending the UserOperation.
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * authentication_method defines the authentication strategy the account wants to use.
   * since accounts can have multiple authentication methods, this field is used to
   * instruct the account on what auth method to use.
   *
   * @generated from field: string authentication_method = 2;
   */
  authenticationMethod = "";

  /**
   * authentication_data defines the authentication data associated with the authentication method.
   * It is the account implementer duty to assess that the UserOperation is properly signed.
   *
   * @generated from field: bytes authentication_data = 3;
   */
  authenticationData = new Uint8Array(0);

  /**
   * sequence defines the sequence number of the account, the authentication method might require this
   * to ensure non-replayability.
   *
   * @generated from field: uint64 sequence = 4;
   */
  sequence = protoInt64.zero;

  /**
   * authentication_gas_limit expresses the gas limit to be used for the authentication part of the
   * UserOperation.
   *
   * @generated from field: uint64 authentication_gas_limit = 5;
   */
  authenticationGasLimit = protoInt64.zero;

  /**
   * bundler_payment_messages expresses a list of messages that the account
   * executes to pay the bundler for submitting the UserOperation.
   * It can be empty if the bundler does not need any form of payment,
   * the handshake for submitting the UserOperation might have happened off-chain.
   * Bundlers and accounts are free to use any form of payment, in fact the payment can
   * either be empty or be expressed as:
   * - NFT payment
   * - IBC Token payment.
   * - Payment through delegations.
   *
   * @generated from field: repeated google.protobuf.Any bundler_payment_messages = 6;
   */
  bundlerPaymentMessages: Any[] = [];

  /**
   * bundler_payment_gas_limit defines the gas limit to be used for the bundler payment.
   * This ensures that, since the bundler executes a list of UserOperations and there needs to
   * be minimal trust between bundler and UserOperation sender, the sender cannot consume
   * the whole bundle gas.
   *
   * @generated from field: uint64 bundler_payment_gas_limit = 7;
   */
  bundlerPaymentGasLimit = protoInt64.zero;

  /**
   * execution_messages expresses a list of messages that the account wants to execute.
   * This concretely is the intent of the transaction expressed as a UserOperation.
   *
   * @generated from field: repeated google.protobuf.Any execution_messages = 8;
   */
  executionMessages: Any[] = [];

  /**
   * execution_gas_limit defines the gas limit to be used for the execution of the UserOperation's
   * execution messages.
   *
   * @generated from field: uint64 execution_gas_limit = 9;
   */
  executionGasLimit = protoInt64.zero;

  constructor(data?: PartialMessage<UserOperation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.UserOperation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "authentication_method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "authentication_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "authentication_gas_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "bundler_payment_messages", kind: "message", T: Any, repeated: true },
    { no: 7, name: "bundler_payment_gas_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "execution_messages", kind: "message", T: Any, repeated: true },
    { no: 9, name: "execution_gas_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserOperation {
    return new UserOperation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserOperation {
    return new UserOperation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserOperation {
    return new UserOperation().fromJsonString(jsonString, options);
  }

  static equals(a: UserOperation | PlainMessage<UserOperation> | undefined, b: UserOperation | PlainMessage<UserOperation> | undefined): boolean {
    return proto3.util.equals(UserOperation, a, b);
  }
}

/**
 * UserOperationResponse defines the response of a UserOperation.
 *
 * @generated from message cosmos.accounts.v1.UserOperationResponse
 */
export class UserOperationResponse extends Message<UserOperationResponse> {
  /**
   * authentication_gas_used defines the gas used for the authentication part of the UserOperation.
   *
   * @generated from field: uint64 authentication_gas_used = 1;
   */
  authenticationGasUsed = protoInt64.zero;

  /**
   * bundler_payment_gas_used defines the gas used for the bundler payment part of the UserOperation.
   *
   * @generated from field: uint64 bundler_payment_gas_used = 2;
   */
  bundlerPaymentGasUsed = protoInt64.zero;

  /**
   * bundler_payment_responses defines the responses of the bundler payment messages.
   * It can be empty if the bundler does not need any form of payment.
   *
   * @generated from field: repeated google.protobuf.Any bundler_payment_responses = 3;
   */
  bundlerPaymentResponses: Any[] = [];

  /**
   * execution_gas_used defines the gas used for the execution part of the UserOperation.
   *
   * @generated from field: uint64 execution_gas_used = 4;
   */
  executionGasUsed = protoInt64.zero;

  /**
   * execution_responses defines the responses of the execution messages.
   *
   * @generated from field: repeated google.protobuf.Any execution_responses = 5;
   */
  executionResponses: Any[] = [];

  constructor(data?: PartialMessage<UserOperationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.UserOperationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authentication_gas_used", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "bundler_payment_gas_used", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "bundler_payment_responses", kind: "message", T: Any, repeated: true },
    { no: 4, name: "execution_gas_used", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "execution_responses", kind: "message", T: Any, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserOperationResponse {
    return new UserOperationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserOperationResponse {
    return new UserOperationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserOperationResponse {
    return new UserOperationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserOperationResponse | PlainMessage<UserOperationResponse> | undefined, b: UserOperationResponse | PlainMessage<UserOperationResponse> | undefined): boolean {
    return proto3.util.equals(UserOperationResponse, a, b);
  }
}

