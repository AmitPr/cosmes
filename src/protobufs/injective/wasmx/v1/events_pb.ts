// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/wasmx/v1/events.proto (package injective.wasmx.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message injective.wasmx.v1.EventContractExecution
 */
export class EventContractExecution extends Message<EventContractExecution> {
  /**
   * @generated from field: string contract_address = 1;
   */
  contractAddress = "";

  /**
   * @generated from field: bytes response = 2;
   */
  response = new Uint8Array(0);

  /**
   * @generated from field: string error = 3;
   */
  error = "";

  constructor(data?: PartialMessage<EventContractExecution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.EventContractExecution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "response", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventContractExecution {
    return new EventContractExecution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventContractExecution {
    return new EventContractExecution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventContractExecution {
    return new EventContractExecution().fromJsonString(jsonString, options);
  }

  static equals(a: EventContractExecution | PlainMessage<EventContractExecution> | undefined, b: EventContractExecution | PlainMessage<EventContractExecution> | undefined): boolean {
    return proto3.util.equals(EventContractExecution, a, b);
  }
}

